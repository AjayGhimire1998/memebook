{"ast":null,"code":"var _jsxFileName = \"/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/CreateMeme.jsx\",\n    _s = $RefreshSig$();\n\nimport { ProfileContext } from \"../../context/ProfileContext\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateMemeContext } from \"../../context/CreateMemeContext\";\nimport \"./CreateMeme.css\";\nimport { UploadCreatedMemeContext } from \"../../context/UploadCreatedMemeContext\";\nimport { db, auth, storage } from \"../../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateMeme() {\n  _s();\n\n  const [createMeme, setCreateMeme] = useContext(CreateMemeContext); // const [uploadCreatedMeme, setUploadCreatedMeme] = useContext(\n  //   UploadCreatedMemeContext\n  // );\n\n  const [inputText, setInputText] = useState([]); // const [topMemeText, setTopMemetext] = useState(\"\");\n  // const [bottomMemeText, setBottomMemetext] = useState(\"\");\n\n  const [imageForMeme, setImageForMeme] = useState();\n  const [memesFromApi, setMemesFromApi] = useState();\n  const [currentGeneratedMeme, setCurrentGeneratedMeme] = useState();\n  const history = useHistory();\n  const [caption, setCaption] = useState(\"\");\n  const [imageLoad, setImageLoad] = useState(null);\n  const [idea, setIdea] = useState([]); // function SeePreview(e) {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     const src = e.target.files[0];\n  //     setImageForMeme(src);\n  //   }\n  // }\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(body => {\n      setMemesFromApi([...body.data.memes]);\n    });\n  }, []);\n\n  const handleInputChange = e => {\n    setInputText({ ...inputText,\n      [e.target.name]: e.target.value\n    });\n    console.log(inputText.topText);\n  };\n\n  const memesINeed = memesFromApi === null || memesFromApi === void 0 ? void 0 : memesFromApi.filter(meme => {\n    return meme.box_count === 2;\n  });\n\n  const handleGenerate = e => {\n    e.preventDefault();\n    const randomMemeTemplate = Math.floor(Math.random() * memesINeed.length);\n    setCurrentGeneratedMeme(memesINeed[randomMemeTemplate]);\n    const randomMemeTemplateUrl = memesINeed[randomMemeTemplate].url;\n    setImageForMeme(randomMemeTemplateUrl);\n    console.log(memesINeed[randomMemeTemplate].box_count);\n    history.push(`/homeview/create/${memesINeed[randomMemeTemplate].name}`);\n  };\n\n  const handleCreate = e => {\n    e.preventDefault();\n    const currentMeme = currentGeneratedMeme;\n    console.log(currentMeme);\n    const formData = new FormData();\n    formData.append(\"username\", \"ajay.gh\");\n    formData.append(\"password\", \"Dharan123\");\n    formData.append(\"template_id\", currentMeme.id);\n    formData.append(\"text0\", inputText.topText);\n    formData.append(\"text1\", inputText.bottomText);\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData\n    }).then(res => res.json()).then(body => {\n      console.log(body);\n      setCreateMeme(body.data);\n    }).catch(error => console.log(\"Error:\", error));\n  };\n\n  const handleIdea = e => {\n    e.preventDefault();\n    fetch(\"https://jokeapi-v2.p.rapidapi.com/joke/Any?type=single\", {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"jokeapi-v2.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"285626be1emsh6252dd238a98631p1c38c5jsn328387bb55ff\"\n      }\n    }).then(response => response.json()).then(data => {\n      setIdea(data.joke);\n    });\n    const words = idea.match(/(\\w+)/g).length; //    \\w+    between one and unlimited word characters\n    //    /g     greedy - don't stop after the first match\n\n    console.log(words);\n\n    if (words < 30) {\n      const firstHalf = idea.split(\" \", words / 2).join(\" \");\n      console.log(firstHalf);\n      const secondHalf = idea.split(\" \").slice(words / 2).join(\" \");\n      console.log(secondHalf);\n      setInputText({\n        topText: firstHalf,\n        bottomText: secondHalf\n      });\n    } // useEffect(() => {\n    //   const uploadFile = () => {\n    //     const name = new Date().getTime();\n    //     console.log(name);\n    //     const storageRef = ref(storage, createMeme.name);\n    //     const uploadTask = uploadBytesResumable(storageRef, createMeme);\n    //     uploadTask.on(\n    //       \"state_changed\",\n    //       (snapshot) => {\n    //         const progress =\n    //           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    //         console.log(\"Upload is \" + progress + \"% done\");\n    //         setImageLoad(progress);\n    //         switch (snapshot.state) {\n    //           case \"paused\":\n    //             console.log(\"Upload is paused\");\n    //             break;\n    //           case \"running\":\n    //             console.log(\"Upload is running\");\n    //             break;\n    //           default:\n    //             break;\n    //         }\n    //       },\n    //       (error) => {\n    //         console.log(error);\n    //       },\n    //       () => {\n    //         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n    //           console.log(\"File available at\", downloadURL);\n    //           setUploadCreatedMeme({ ...uploadCreateMeme, uploadedCreatedMeme: downloadURL });\n    //         });\n    //       }\n    //     );\n    //   };\n    //   createMeme && uploadFile();\n    // }, [createMeme]);\n    // const handleCaptionInput = (e) => {\n    //   setUploadCreatedMeme({ ...uploadCreatedMeme, [e.target.name]: e.target.value });\n    // };\n    // const handleShare = async (e) => {\n    //   e.preventDefault();\n    //   try {\n    //     const user = auth.currentUser;\n    //     const memeCollectionRef = collection(db, \"CreatedMemes\");\n    //     await addDoc(memeCollectionRef, {\n    //       caption: uploadCreatedMeme.caption,\n    //       uploadedMemeImage: uploadCreatedMeme.uploadedMeme,\n    //     });\n    //   } catch (error) {\n    //     console.log(error);\n    //   }\n    //   history.push(\"/homeview\");\n    // };\n    // console.log(imageForMeme);\n\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"create-show\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          method: \"post\",\n          className: \"form\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"label-top\",\n            children: [\"Alright, Lets Create a Meme\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 15\n            }, this), \"\\uD83E\\uDD2D\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"label\",\n            onClick: handleGenerate,\n            children: \"Generate Meme Template\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            forhtml: \"fullName\",\n            children: \"Top Text: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            name: \"topText\",\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            forhtml: \"fullName\",\n            children: \"Bottom Text: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            name: \"bottomText\",\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this), imageForMeme ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"meme\",\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: imageForMeme,\n              alt: \"meme\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"top\",\n              children: inputText.topText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"bottom\",\n              children: inputText.bottomText\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-image\",\n            onClick: handleIdea,\n            children: \"Need Idea?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-profile\",\n            onClick: handleCreate,\n            children: \"Generate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 20\n          }, this), imageForMeme ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: createMeme.url,\n            alt: \"meme\",\n            style: {\n              height: \"auto\",\n              width: \"auto\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 20\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Caption...\",\n            name: \"caption\" // onChange={handleCaptionInput}\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"save-profile\",\n            onClick: handleCreate,\n            children: \"Share\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this);\n  };\n}\n\n_s(CreateMeme, \"vtrK/y7lkjl1eFKaneF1bgXjKR4=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateMeme;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMeme\");","map":{"version":3,"sources":["/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/CreateMeme.jsx"],"names":["ProfileContext","useContext","useEffect","useRef","useState","useHistory","CreateMemeContext","UploadCreatedMemeContext","db","auth","storage","ref","uploadBytesResumable","getDownloadURL","collection","addDoc","CreateMeme","createMeme","setCreateMeme","inputText","setInputText","imageForMeme","setImageForMeme","memesFromApi","setMemesFromApi","currentGeneratedMeme","setCurrentGeneratedMeme","history","caption","setCaption","imageLoad","setImageLoad","idea","setIdea","fetch","then","res","json","body","data","memes","handleInputChange","e","target","name","value","console","log","topText","memesINeed","filter","meme","box_count","handleGenerate","preventDefault","randomMemeTemplate","Math","floor","random","length","randomMemeTemplateUrl","url","push","handleCreate","currentMeme","formData","FormData","append","id","bottomText","method","catch","error","handleIdea","headers","response","joke","words","match","firstHalf","split","join","secondHalf","slice","height","width"],"mappings":"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","sourcesContent":["import { ProfileContext } from \"../../context/ProfileContext\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateMemeContext } from \"../../context/CreateMemeContext\";\nimport \"./CreateMeme.css\";\nimport { UploadCreatedMemeContext } from \"../../context/UploadCreatedMemeContext\";\nimport { db, auth, storage } from \"../../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { collection, addDoc } from \"firebase/firestore\";\n\nexport default function CreateMeme() {\n  const [createMeme, setCreateMeme] = useContext(CreateMemeContext);\n  // const [uploadCreatedMeme, setUploadCreatedMeme] = useContext(\n  //   UploadCreatedMemeContext\n  // );\n  const [inputText, setInputText] = useState([]);\n  // const [topMemeText, setTopMemetext] = useState(\"\");\n  // const [bottomMemeText, setBottomMemetext] = useState(\"\");\n  const [imageForMeme, setImageForMeme] = useState();\n  const [memesFromApi, setMemesFromApi] = useState();\n  const [currentGeneratedMeme, setCurrentGeneratedMeme] = useState();\n  const history = useHistory();\n  const [caption, setCaption] = useState(\"\");\n  const [imageLoad, setImageLoad] = useState(null);\n  const [idea, setIdea] = useState([]);\n\n  // function SeePreview(e) {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     const src = e.target.files[0];\n  //     setImageForMeme(src);\n  //   }\n  // }\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((body) => {\n        setMemesFromApi([...body.data.memes]);\n      });\n  }, []);\n\n  const handleInputChange = (e) => {\n    setInputText({ ...inputText, [e.target.name]: e.target.value });\n    console.log(inputText.topText);\n  };\n\n  const memesINeed = memesFromApi?.filter((meme) => {\n    return meme.box_count === 2;\n  });\n\n  const handleGenerate = (e) => {\n    e.preventDefault();\n    const randomMemeTemplate = Math.floor(Math.random() * memesINeed.length);\n    setCurrentGeneratedMeme(memesINeed[randomMemeTemplate]);\n    const randomMemeTemplateUrl = memesINeed[randomMemeTemplate].url;\n    setImageForMeme(randomMemeTemplateUrl);\n    console.log(memesINeed[randomMemeTemplate].box_count);\n    history.push(`/homeview/create/${memesINeed[randomMemeTemplate].name}`);\n  };\n\n  const handleCreate = (e) => {\n    e.preventDefault();\n    const currentMeme = currentGeneratedMeme;\n    console.log(currentMeme);\n    const formData = new FormData();\n\n    formData.append(\"username\", \"ajay.gh\");\n    formData.append(\"password\", \"Dharan123\");\n    formData.append(\"template_id\", currentMeme.id);\n    formData.append(\"text0\", inputText.topText);\n    formData.append(\"text1\", inputText.bottomText);\n\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((body) => {\n        console.log(body);\n        setCreateMeme(body.data);\n      })\n      .catch((error) => console.log(\"Error:\", error));\n  };\n\n  const handleIdea = (e) => {\n    e.preventDefault();\n    fetch(\"https://jokeapi-v2.p.rapidapi.com/joke/Any?type=single\", {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-host\": \"jokeapi-v2.p.rapidapi.com\",\n        \"x-rapidapi-key\": \"285626be1emsh6252dd238a98631p1c38c5jsn328387bb55ff\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setIdea(data.joke);\n      });\n\n    const words = idea.match(/(\\w+)/g).length; //    \\w+    between one and unlimited word characters\n    //    /g     greedy - don't stop after the first match\n    console.log(words);\n\n    if (words < 30) {\n      const firstHalf = idea.split(\" \", words / 2).join(\" \");\n      console.log(firstHalf);\n\n      const secondHalf = idea\n        .split(\" \")\n        .slice(words / 2)\n        .join(\" \");\n      console.log(secondHalf);\n\n      setInputText({topText: firstHalf, bottomText: secondHalf})\n    }\n    // useEffect(() => {\n    //   const uploadFile = () => {\n    //     const name = new Date().getTime();\n    //     console.log(name);\n    //     const storageRef = ref(storage, createMeme.name);\n    //     const uploadTask = uploadBytesResumable(storageRef, createMeme);\n\n    //     uploadTask.on(\n    //       \"state_changed\",\n    //       (snapshot) => {\n    //         const progress =\n    //           (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n    //         console.log(\"Upload is \" + progress + \"% done\");\n    //         setImageLoad(progress);\n    //         switch (snapshot.state) {\n    //           case \"paused\":\n    //             console.log(\"Upload is paused\");\n    //             break;\n    //           case \"running\":\n    //             console.log(\"Upload is running\");\n    //             break;\n    //           default:\n    //             break;\n    //         }\n    //       },\n    //       (error) => {\n    //         console.log(error);\n    //       },\n    //       () => {\n    //         getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n    //           console.log(\"File available at\", downloadURL);\n    //           setUploadCreatedMeme({ ...uploadCreateMeme, uploadedCreatedMeme: downloadURL });\n    //         });\n    //       }\n    //     );\n    //   };\n    //   createMeme && uploadFile();\n    // }, [createMeme]);\n\n    // const handleCaptionInput = (e) => {\n    //   setUploadCreatedMeme({ ...uploadCreatedMeme, [e.target.name]: e.target.value });\n    // };\n\n    // const handleShare = async (e) => {\n    //   e.preventDefault();\n    //   try {\n    //     const user = auth.currentUser;\n    //     const memeCollectionRef = collection(db, \"CreatedMemes\");\n    //     await addDoc(memeCollectionRef, {\n    //       caption: uploadCreatedMeme.caption,\n    //       uploadedMemeImage: uploadCreatedMeme.uploadedMeme,\n    //     });\n    //   } catch (error) {\n    //     console.log(error);\n    //   }\n    //   history.push(\"/homeview\");\n    // };\n\n    // console.log(imageForMeme);\n    return (\n      <div className=\"container\">\n        <div className=\"create-show\">\n          <form method=\"post\" className=\"form\">\n            <label className=\"label-top\">\n              Alright, Lets Create a Meme\n              <br />\n              <br />\n              🤭\n            </label>\n            <br /> <br />\n            <button className=\"label\" onClick={handleGenerate}>\n              Generate Meme Template\n            </button>\n            <br />\n            <label forhtml=\"fullName\">Top Text: </label>\n            <br />\n            <textarea\n              type=\"text\"\n              name=\"topText\"\n              onChange={handleInputChange}\n            ></textarea>\n            <br />\n            <label forhtml=\"fullName\">Bottom Text: </label>\n            <br />\n            <textarea\n              type=\"text\"\n              name=\"bottomText\"\n              onChange={handleInputChange}\n            ></textarea>\n            {/* <small>Upload Progress: {imageLoad}% done!!</small> */}\n            <br />\n            {/* <input\n            name=\"creatingMeme\"\n            type=\"file\"\n            id=\"file-ip\"\n            accept=\"image/*\"\n            onChange={SeePreview}\n            hidden\n          ></input> */}\n            {/* {imageForMeme ? (\n            <div className=\"meme\">\n                <img src={URL.createObjectURL(imageForMeme)} alt=\"meme\" />\n                <h2 className=\"top\">{inputText.topText}</h2>\n                <h2 className=\"bottom\">{inputText.bottomText}</h2>\n            </div>\n          ) : null} */}\n            {imageForMeme ? (\n              <div className=\"meme\">\n                <img src={imageForMeme} alt=\"meme\" />\n                <h2 className=\"top\">{inputText.topText}</h2>\n                <h2 className=\"bottom\">{inputText.bottomText}</h2>\n              </div>\n            ) : null}\n            <br />\n            <button className=\"reset-image\" onClick={handleIdea}>\n              Need Idea?\n            </button>\n            <br /> <br />\n            <button className=\"save-profile\" onClick={handleCreate}>\n              Generate\n            </button>\n            <br /> <br />\n            {imageForMeme ? (\n              <img\n                src={createMeme.url}\n                alt=\"meme\"\n                style={{ height: \"auto\", width: \"auto\" }}\n              />\n            ) : null}\n            <br /> <br />\n            <input\n              type=\"text\"\n              placeholder=\"Caption...\"\n              name=\"caption\"\n              // onChange={handleCaptionInput}\n            ></input>\n            <button className=\"save-profile\" onClick={handleCreate}>\n              Share\n            </button>\n          </form>\n        </div>\n      </div>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}