{"ast":null,"code":"var _jsxFileName = \"/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AuthForm/LoadingSpin.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoadingSpin() {\n  _s();\n\n  const [loadingSpin, setLoadingSpin] = useState(false);\n  useEffect(() => {\n    const loadingTime = setTimeout(() => {\n      setLoadingSpin(true);\n    }, 2000);\n    return clearTimeout(loadingTime);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading-spin\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: setLoadingSpin ? \"dot-spin\" : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoadingSpin, \"F3L/dAan+K7Tfp9omMyiWcUIbJY=\");\n\n_c = LoadingSpin;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoadingSpin\");","map":{"version":3,"sources":["/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AuthForm/LoadingSpin.jsx"],"names":["useEffect","useState","LoadingSpin","loadingSpin","setLoadingSpin","loadingTime","setTimeout","clearTimeout"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,eAAe,SAASC,WAAT,GAAuB;AAAA;;AACpC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCH,QAAQ,CAAC,KAAD,CAA9C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMK,WAAW,GAAGC,UAAU,CAAC,MAAM;AACjCF,MAAAA,cAAc,CAAC,IAAD,CAAd;AACH,KAF6B,EAE3B,IAF2B,CAA9B;AAIA,WAAOG,YAAY,CAACF,WAAD,CAAnB;AACD,GANQ,CAAT;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAED,cAAc,GAAG,UAAH,GAAgB;AAA9C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAfuBF,W;;KAAAA,W","sourcesContent":["import { useEffect, useState } from \"react\";\n\nexport default function LoadingSpin() {\n  const [loadingSpin, setLoadingSpin] = useState(false);\n\n  useEffect(() => {\n    const loadingTime = setTimeout(() => {\n        setLoadingSpin(true)\n    }, 2000);\n\n    return clearTimeout(loadingTime);\n  });\n  return (\n    <div className=\"loading-spin\">\n      <div className={setLoadingSpin ? \"dot-spin\" : \"\"}></div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}