{"ast":null,"code":"var _jsxFileName = \"/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/CreateMeme.jsx\",\n    _s = $RefreshSig$();\n\nimport { ProfileContext } from \"../../context/ProfileContext\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateMemeContext } from \"../../context/CreateMemeContext\";\nimport \"./CreateMeme.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateMeme() {\n  _s();\n\n  const [createMeme, setCreateMeme] = useContext(CreateMemeContext);\n  const [captionText, setCaptionText] = useState([]);\n  const [imageForMeme, setImageForMeme] = useState();\n  const [memesFromApi, setMemesFromApi] = useState();\n  const [imageLoad, setImageLoad] = useState(null);\n  const history = useHistory(); // function SeePreview(e) {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     const src = e.target.files[0];\n  //     setImageForMeme(src);\n  //   }\n  // }\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(body => {\n      setMemesFromApi(body.data.memes);\n    });\n  }, []);\n  useEffect(() => {\n    console.log(captionText);\n  }, [captionText]);\n  console.log(memesFromApi);\n\n  const handleGenerate = e => {\n    e.preventDefault();\n    const randomMemeTemplate = Math.floor(Math.random() * memesFromApi.length);\n    const randomMemeTemplateUrl = memesFromApi[randomMemeTemplate].url;\n    setImageForMeme(randomMemeTemplateUrl);\n    setCaptionText(Array(memesFromApi[randomMemeTemplate].box_count).fill(\" \"));\n    console.log(captionText);\n    console.log(imageForMeme);\n    history.push(`/homeview/create/${memesFromApi[randomMemeTemplate].name}`);\n  };\n\n  const handleInputChange = (e, index) => {\n    const text = e.target.value;\n    setCaptionText(captionText.map((c, i) => {\n      if (index === i) {\n        return text;\n      } else {\n        return c;\n      }\n    }));\n  }; // useEffect(() => {\n  //   if(memesFromApi) {\n  //     setCaptionText(memesFromApi.map().box_count.fill(''))\n  //   }\n  // })\n  // useEffect(() => {\n  //   console.log(memesFromApi.box_count)\n  // },[inputText])\n\n\n  const handleReset = e => {\n    e.preventDefault();\n    setCaptionText({\n      topText: \"\",\n      bottomText: \"\"\n    });\n  }; // console.log(imageForMeme);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-show\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        method: \"post\",\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label-top\",\n          children: [\"Alright, Lets Create a Meme\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), \"\\uD83E\\uDD2D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"label\",\n          onClick: handleGenerate,\n          children: \"Generate Meme Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), captionText.map((c, index) => {\n          return /*#__PURE__*/_jsxDEV(\"input\", {\n            style: {\n              margin: \"5px\"\n            },\n            placeholder: \"Enter your Texts\",\n            onChange: e => {\n              handleInputChange(e, index);\n            }\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 19\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), imageForMeme ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meme\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageForMeme,\n            alt: \"meme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-image\",\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-profile\" // onClick={handleUpload}\n          ,\n          disabled: imageLoad !== null && imageLoad < 100,\n          children: \"Generate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateMeme, \"GH2ETZi7yDP9eVP5z/13WElAZak=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateMeme;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMeme\");","map":{"version":3,"sources":["/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/CreateMeme.jsx"],"names":["ProfileContext","useContext","useEffect","useRef","useState","useHistory","CreateMemeContext","CreateMeme","createMeme","setCreateMeme","captionText","setCaptionText","imageForMeme","setImageForMeme","memesFromApi","setMemesFromApi","imageLoad","setImageLoad","history","fetch","then","res","json","body","data","memes","console","log","handleGenerate","e","preventDefault","randomMemeTemplate","Math","floor","random","length","randomMemeTemplateUrl","url","Array","box_count","fill","push","name","handleInputChange","index","text","target","value","map","c","i","handleReset","topText","bottomText","margin"],"mappings":"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","sourcesContent":["import { ProfileContext } from \"../../context/ProfileContext\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateMemeContext } from \"../../context/CreateMemeContext\";\nimport \"./CreateMeme.css\";\n\nexport default function CreateMeme() {\n  const [createMeme, setCreateMeme] = useContext(CreateMemeContext);\n  const [captionText, setCaptionText] = useState([]);\n  const [imageForMeme, setImageForMeme] = useState();\n  const [memesFromApi, setMemesFromApi] = useState();\n  const [imageLoad, setImageLoad] = useState(null);\n  const history = useHistory();\n\n  // function SeePreview(e) {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     const src = e.target.files[0];\n  //     setImageForMeme(src);\n  //   }\n  // }\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((body) => {\n        setMemesFromApi(body.data.memes);\n      });\n  }, []);\n\n  useEffect(()=> {\n    console.log(captionText)\n  }, [captionText])\n\n  console.log(memesFromApi);\n\n  const handleGenerate = (e) => {\n    e.preventDefault();\n    const randomMemeTemplate = Math.floor(Math.random() * memesFromApi.length);\n    const randomMemeTemplateUrl = memesFromApi[randomMemeTemplate].url\n    setImageForMeme(randomMemeTemplateUrl);\n    setCaptionText(Array(memesFromApi[randomMemeTemplate].box_count).fill(\" \"))\n    console.log(captionText);\n    console.log(imageForMeme);\n    history.push(`/homeview/create/${memesFromApi[randomMemeTemplate].name}`)\n    \n  };\n\n\n  const handleInputChange = (e, index) => {\n    const text = e.target.value;\n\n    setCaptionText(\n      captionText.map((c, i ) => {\n        if(index === i) {\n          return text;\n        }else{\n          return c;\n        }\n      })\n    );\n  };\n\n  // useEffect(() => {\n  //   if(memesFromApi) {\n  //     setCaptionText(memesFromApi.map().box_count.fill(''))\n  //   }\n  // })\n\n  // useEffect(() => {\n  //   console.log(memesFromApi.box_count)\n  // },[inputText])\n\n  const handleReset = (e) => {\n    e.preventDefault();\n    setCaptionText({\n      topText: \"\",\n      bottomText: \"\",\n    });\n  };\n\n  // console.log(imageForMeme);\n  return (\n    <div className=\"container\">\n      <div className=\"create-show\">\n        <form method=\"post\" className=\"form\">\n          <label className=\"label-top\">\n            Alright, Lets Create a Meme\n            <br />\n            <br />\n            🤭\n          </label>\n          <br /> <br />\n          <button className=\"label\" onClick={handleGenerate}>\n            Generate Meme Template\n          </button>\n          <br /> \n          {captionText.map((c, index) => {\n           return <input key={index}  style={{margin: \"5px\"}} placeholder=\"Enter your Texts\" onChange={(e)=> {\n             handleInputChange(e, index)\n           }}/>\n          })}\n          {/* <label forhtml=\"fullName\">Top Text: </label>\n          <br />\n          <textarea\n            type=\"text\"\n            // value={inputText.topText}\n            name=\"topText\"\n            // onChange={handleInputChange}\n          ></textarea>\n          <br /> \n          <label forhtml=\"fullName\">Bottom Text: </label>\n          <br />\n          <textarea\n            type=\"text\"\n            // value={inputText.bottomText}\n            name=\"bottomText\"\n            // onChange={handleInputChange}\n          ></textarea> */}\n          {/* <small>Upload Progress: {imageLoad}% done!!</small> */}\n          <br />\n          {/* <input\n            name=\"creatingMeme\"\n            type=\"file\"\n            id=\"file-ip\"\n            accept=\"image/*\"\n            onChange={SeePreview}\n            hidden\n          ></input> */}\n\n          {/* {imageForMeme ? (\n            <div className=\"meme\">\n                <img src={URL.createObjectURL(imageForMeme)} alt=\"meme\" />\n                <h2 className=\"top\">{inputText.topText}</h2>\n                <h2 className=\"bottom\">{inputText.bottomText}</h2>\n            </div>\n          ) : null} */}\n          {imageForMeme ? (\n          <div className=\"meme\">\n            <img src={imageForMeme} alt=\"meme\" />\n            {/* <h2 className=\"top\"></h2>\n            <h2 className=\"bottom\"></h2> */}\n          </div>) :null }\n          <br />\n          <button className=\"reset-image\" onClick={handleReset}>\n            Reset\n          </button>\n          <br /> <br />\n          <button\n            className=\"save-profile\"\n            // onClick={handleUpload}\n            disabled={imageLoad !== null && imageLoad < 100}\n          >\n            Generate\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}