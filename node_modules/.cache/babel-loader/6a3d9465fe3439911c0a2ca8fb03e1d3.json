{"ast":null,"code":"var _jsxFileName = \"/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/CreateMeme.jsx\",\n    _s = $RefreshSig$();\n\nimport { ProfileContext } from \"../../context/ProfileContext\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateMemeContext } from \"../../context/CreateMemeContext\";\nimport \"./CreateMeme.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateMeme() {\n  _s();\n\n  const [createMeme, setCreateMeme] = useContext(CreateMemeContext);\n  const [inputText, setInputText] = useState([]);\n  const [topMemeText, setTopMemetext] = useState(\"\");\n  const [bottomMemeText, setBottomMemetext] = useState(\"\");\n  const [imageForMeme, setImageForMeme] = useState();\n  const [memesFromApi, setMemesFromApi] = useState();\n  const [currentGeneratedMeme, setCurrentGeneratedMeme] = useState();\n  const history = useHistory();\n  const [caption, setCaption] = useState(\"\"); // function SeePreview(e) {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     const src = e.target.files[0];\n  //     setImageForMeme(src);\n  //   }\n  // }\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(body => {\n      setMemesFromApi([...body.data.memes]);\n    });\n  }, []);\n  const memesINeed = memesFromApi === null || memesFromApi === void 0 ? void 0 : memesFromApi.filter(meme => {\n    return meme.box_count === 2;\n  });\n\n  const handleGenerate = e => {\n    e.preventDefault();\n    const randomMemeTemplate = Math.floor(Math.random() * memesINeed.length);\n    setCurrentGeneratedMeme(memesINeed[randomMemeTemplate]);\n    const randomMemeTemplateUrl = memesINeed[randomMemeTemplate].url;\n    setImageForMeme(randomMemeTemplateUrl);\n    console.log(memesINeed[randomMemeTemplate].box_count);\n    history.push(`/homeview/create/${memesINeed[randomMemeTemplate].name}`);\n  };\n\n  const handleCreate = e => {\n    e.preventDefault();\n    const currentMeme = currentGeneratedMeme;\n    console.log(currentMeme);\n    const formData = new FormData();\n    formData.append(\"username\", \"ajay.gh\");\n    formData.append(\"password\", \"Dharan123\");\n    formData.append(\"template_id\", currentMeme.id);\n    formData.append(\"text0\", inputText.topText);\n    formData.append(\"text1\", inputText.bottomText);\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData\n    }).then(res => res.json()).then(body => {\n      console.log(body);\n      setCreateMeme(body.data);\n    }).catch(error => console.log(\"Error:\", error));\n  };\n\n  const handleInputChange = e => {\n    setTopMemetext(e.target.value);\n    setBottomMemetext(e.target.value);\n    setInputText({ ...inputText,\n      [e.target.name]: e.target.value\n    });\n    console.log(inputText.topText);\n  };\n\n  const handleReset = e => {\n    e.preventDefault();\n    setInputText({\n      topText: \"\",\n      bottomText: \"\"\n    });\n    setTopMemetext(\"\");\n  }; // console.log(imageForMeme);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-show\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        method: \"post\",\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label-top\",\n          children: [\"Alright, Lets Create a Meme\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), \"\\uD83E\\uDD2D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"label\",\n          onClick: handleGenerate,\n          children: \"Generate Meme Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"fullName\",\n          children: \"Top Text: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: topMemeText,\n          type: \"text\",\n          name: \"topText\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"fullName\",\n          children: \"Bottom Text: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: bottomMemeText,\n          type: \"text\",\n          name: \"bottomText\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this), imageForMeme ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meme\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageForMeme,\n            alt: \"meme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"top\",\n            children: inputText.topText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"bottom\",\n            children: inputText.bottomText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-image\",\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-profile\",\n          onClick: handleCreate,\n          children: \"Generate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateMeme, \"3kwvL1Lu2rqqCvQlHOuZQ6zsOb4=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateMeme;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMeme\");","map":{"version":3,"sources":["/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/CreateMeme.jsx"],"names":["ProfileContext","useContext","useEffect","useRef","useState","useHistory","CreateMemeContext","CreateMeme","createMeme","setCreateMeme","inputText","setInputText","topMemeText","setTopMemetext","bottomMemeText","setBottomMemetext","imageForMeme","setImageForMeme","memesFromApi","setMemesFromApi","currentGeneratedMeme","setCurrentGeneratedMeme","history","caption","setCaption","fetch","then","res","json","body","data","memes","memesINeed","filter","meme","box_count","handleGenerate","e","preventDefault","randomMemeTemplate","Math","floor","random","length","randomMemeTemplateUrl","url","console","log","push","name","handleCreate","currentMeme","formData","FormData","append","id","topText","bottomText","method","catch","error","handleInputChange","target","value","handleReset"],"mappings":"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","sourcesContent":["import { ProfileContext } from \"../../context/ProfileContext\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateMemeContext } from \"../../context/CreateMemeContext\";\nimport \"./CreateMeme.css\";\n\nexport default function CreateMeme() {\n  const [createMeme, setCreateMeme] = useContext(CreateMemeContext);\n  const [inputText, setInputText] = useState([]);\n  const [topMemeText, setTopMemetext] = useState(\"\");\n  const [bottomMemeText, setBottomMemetext] = useState(\"\");\n  const [imageForMeme, setImageForMeme] = useState();\n  const [memesFromApi, setMemesFromApi] = useState();\n  const [currentGeneratedMeme, setCurrentGeneratedMeme] = useState();\n  const history = useHistory();\n  const [caption, setCaption] = useState(\"\");\n\n  // function SeePreview(e) {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     const src = e.target.files[0];\n  //     setImageForMeme(src);\n  //   }\n  // }\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((body) => {\n        setMemesFromApi([...body.data.memes]);\n      });\n  }, []);\n\n  const memesINeed = memesFromApi?.filter((meme) => {\n    return meme.box_count === 2;\n  });\n\n  const handleGenerate = (e) => {\n    e.preventDefault();\n    const randomMemeTemplate = Math.floor(Math.random() * memesINeed.length);\n    setCurrentGeneratedMeme(memesINeed[randomMemeTemplate]);\n    const randomMemeTemplateUrl = memesINeed[randomMemeTemplate].url;\n    setImageForMeme(randomMemeTemplateUrl);\n    console.log(memesINeed[randomMemeTemplate].box_count);\n    history.push(`/homeview/create/${memesINeed[randomMemeTemplate].name}`);\n  };\n\n  const handleCreate = (e) => {\n    e.preventDefault();\n    const currentMeme = currentGeneratedMeme;\n    console.log(currentMeme);\n    const formData = new FormData();\n\n    formData.append(\"username\", \"ajay.gh\");\n    formData.append(\"password\", \"Dharan123\");\n    formData.append(\"template_id\", currentMeme.id);\n    formData.append(\"text0\", inputText.topText);\n    formData.append(\"text1\", inputText.bottomText);\n\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((body) => {\n        console.log(body);\n        setCreateMeme(body.data);\n      })\n      .catch((error) => console.log(\"Error:\", error));\n  };\n\n  const handleInputChange = (e) => {\n    setTopMemetext(e.target.value)\n    setBottomMemetext(e.target.value)\n    setInputText({ ...inputText, [e.target.name]: e.target.value });\n    console.log(inputText.topText);\n  };\n\n  const handleReset = (e) => {\n    e.preventDefault();\n    setInputText({\n      topText: \"\",\n      bottomText: \"\",\n    });\n    setTopMemetext(\"\")\n  };\n\n  // console.log(imageForMeme);\n  return (\n    <div className=\"container\">\n      <div className=\"create-show\">\n        <form method=\"post\" className=\"form\">\n          <label className=\"label-top\">\n            Alright, Lets Create a Meme\n            <br />\n            <br />\n            🤭\n          </label>\n          <br /> <br />\n          <button className=\"label\" onClick={handleGenerate}>\n            Generate Meme Template\n          </button>\n          <br />\n          <label forhtml=\"fullName\">Top Text: </label>\n          <br />\n          <textarea\n            value={topMemeText}\n            type=\"text\"\n            name=\"topText\"\n            onChange={handleInputChange}\n          ></textarea>\n          <br />\n          <label forhtml=\"fullName\">Bottom Text: </label>\n          <br />\n          <textarea\n            value={bottomMemeText}\n            type=\"text\"\n            name=\"bottomText\"\n            onChange={handleInputChange}\n          ></textarea>\n          {/* <small>Upload Progress: {imageLoad}% done!!</small> */}\n          <br />\n          {/* <input\n            name=\"creatingMeme\"\n            type=\"file\"\n            id=\"file-ip\"\n            accept=\"image/*\"\n            onChange={SeePreview}\n            hidden\n          ></input> */}\n          {/* {imageForMeme ? (\n            <div className=\"meme\">\n                <img src={URL.createObjectURL(imageForMeme)} alt=\"meme\" />\n                <h2 className=\"top\">{inputText.topText}</h2>\n                <h2 className=\"bottom\">{inputText.bottomText}</h2>\n            </div>\n          ) : null} */}\n          {imageForMeme ? (\n            <div className=\"meme\">\n              <img src={imageForMeme} alt=\"meme\" />\n              <h2 className=\"top\">{inputText.topText}</h2>\n              <h2 className=\"bottom\">{inputText.bottomText}</h2>\n            </div>\n          ) : null}\n          <br />\n          <button className=\"reset-image\" onClick={handleReset}>\n            Reset\n          </button>\n          <br /> <br />\n          <button className=\"save-profile\" onClick={handleCreate}>\n            Generate\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}