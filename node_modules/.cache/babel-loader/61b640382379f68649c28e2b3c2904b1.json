{"ast":null,"code":"var _jsxFileName = \"/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/MemesFromFBD.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { db, auth, storage } from \"../../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { doc, collection, getDocs } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MemesFromFBD() {\n  _s();\n\n  const [allUploadedMemes, SetAllUploadedMemes] = useState([]); //   const [username, setUsername] = useState(\"\");\n\n  const user = auth.currentUser;\n  const memeCollectionRef = collection(db, \"users\", user.uid, \"memes\");\n  useEffect(() => {\n    getAllUploadedMemes();\n  }, []);\n\n  const getAllUploadedMemes = async () => {\n    const uploadedMemes = await getDocs(memeCollectionRef);\n    SetAllUploadedMemes(uploadedMemes.docs.map(doc => ({ ...doc.data(),\n      id: doc.id\n    })));\n  };\n\n  console.log(allUploadedMemes);\n  const uploadedMemeToDisplay = allUploadedMemes.map((meme, index) => {\n    const meme_url = meme.uploadedMemeImage;\n    console.log(meme.caption);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meme-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          float: \"left\"\n        },\n        children: \"not defined\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n        style: {\n          fontStyle: \"italic\",\n          fontWeight: \"300\",\n          fontSize: \"15px\",\n          float: \"left\"\n        },\n        children: meme.caption\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: meme_url,\n        alt: meme.caption,\n        className: \"meme-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 16\n      }, this)]\n    }, index + 1, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  }); // const deleteMeme = (id) => {\n  //     const memeDoc = doc(db, \"users\", user.uid, \"memes\", id)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: uploadedMemeToDisplay\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 10\n  }, this);\n}\n\n_s(MemesFromFBD, \"M9LTxx8QeUxrNi0vW3JWZ05A5+I=\");\n\n_c = MemesFromFBD;\n\nvar _c;\n\n$RefreshReg$(_c, \"MemesFromFBD\");","map":{"version":3,"sources":["/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/MemesFromFBD.jsx"],"names":["React","useEffect","useState","db","auth","storage","ref","uploadBytesResumable","getDownloadURL","doc","collection","getDocs","MemesFromFBD","allUploadedMemes","SetAllUploadedMemes","user","currentUser","memeCollectionRef","uid","getAllUploadedMemes","uploadedMemes","docs","map","data","id","console","log","uploadedMemeToDisplay","meme","index","meme_url","uploadedMemeImage","caption","float","fontStyle","fontWeight","fontSize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,EAAT,EAAaC,IAAb,EAAmBC,OAAnB,QAAkC,gBAAlC;AACA,SAASC,GAAT,EAAcC,oBAAd,EAAoCC,cAApC,QAA0D,kBAA1D;AACA,SAASC,GAAT,EAAcC,UAAd,EAA0BC,OAA1B,QAAyC,oBAAzC;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,EAAD,CAAxD,CADqC,CAErC;;AAEA,QAAMa,IAAI,GAAGX,IAAI,CAACY,WAAlB;AACA,QAAMC,iBAAiB,GAAGP,UAAU,CAACP,EAAD,EAAK,OAAL,EAAcY,IAAI,CAACG,GAAnB,EAAwB,OAAxB,CAApC;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACdkB,IAAAA,mBAAmB;AACpB,GAFQ,EAEN,EAFM,CAAT;;AAIA,QAAMA,mBAAmB,GAAG,YAAY;AACtC,UAAMC,aAAa,GAAG,MAAMT,OAAO,CAACM,iBAAD,CAAnC;AACAH,IAAAA,mBAAmB,CACjBM,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAwBb,GAAD,KAAU,EAAE,GAAGA,GAAG,CAACc,IAAJ,EAAL;AAAiBC,MAAAA,EAAE,EAAEf,GAAG,CAACe;AAAzB,KAAV,CAAvB,CADiB,CAAnB;AAGD,GALD;;AAMAC,EAAAA,OAAO,CAACC,GAAR,CAAYb,gBAAZ;AAEA,QAAMc,qBAAqB,GAAGd,gBAAgB,CAACS,GAAjB,CAAqB,CAACM,IAAD,EAAOC,KAAP,KAAiB;AAClE,UAAMC,QAAQ,GAAGF,IAAI,CAACG,iBAAtB;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYE,IAAI,CAACI,OAAjB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE;AAAI,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AACE,QAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE,QADN;AAELC,UAAAA,UAAU,EAAE,KAFP;AAGLC,UAAAA,QAAQ,EAAE,MAHL;AAILH,UAAAA,KAAK,EAAE;AAJF,SADT;AAAA,kBAQGL,IAAI,CAACI;AARR;AAAA;AAAA;AAAA;AAAA,cAHF,eAaE;AAAA;AAAA;AAAA;AAAA,cAbF,oBAaS;AAAA;AAAA;AAAA;AAAA,cAbT,eAcE;AACE,QAAA,GAAG,EAAEF,QADP;AAEE,QAAA,GAAG,EAAEF,IAAI,CAACI,OAFZ;AAGE,QAAA,SAAS,EAAC;AAHZ;AAAA;AAAA;AAAA;AAAA,cAdF,eAmBE;AAAA;AAAA;AAAA;AAAA,cAnBF,oBAmBS;AAAA;AAAA;AAAA;AAAA,cAnBT;AAAA,OAAqCH,KAAK,GAAG,CAA7C;AAAA;AAAA;AAAA;AAAA,YADF;AAuBD,GA1B6B,CAA9B,CAnBqC,CA+CrC;AACA;AACA;;AACA,sBAAO;AAAA,cAAMF;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAnDuBf,Y;;KAAAA,Y","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { db, auth, storage } from \"../../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { doc, collection, getDocs } from \"firebase/firestore\";\n\nexport default function MemesFromFBD() {\n  const [allUploadedMemes, SetAllUploadedMemes] = useState([]);\n  //   const [username, setUsername] = useState(\"\");\n\n  const user = auth.currentUser;\n  const memeCollectionRef = collection(db, \"users\", user.uid, \"memes\");\n\n  useEffect(() => {\n    getAllUploadedMemes();\n  }, []);\n\n  const getAllUploadedMemes = async () => {\n    const uploadedMemes = await getDocs(memeCollectionRef);\n    SetAllUploadedMemes(\n      uploadedMemes.docs.map((doc) => ({ ...doc.data(), id: doc.id })),\n    );\n  };\n  console.log(allUploadedMemes);\n\n  const uploadedMemeToDisplay = allUploadedMemes.map((meme, index) => {\n    const meme_url = meme.uploadedMemeImage;\n    console.log(meme.caption)\n    return (\n      <div className=\"meme-container\" key={index + 1}>\n        <h4 style={{ float: \"left\" }}>not defined</h4>\n        <br />\n        <small\n          style={{\n            fontStyle: \"italic\",\n            fontWeight: \"300\",\n            fontSize: \"15px\",\n            float: \"left\",\n          }}\n        >\n          {meme.caption}\n        </small>\n        <br /> <br />\n        <img\n          src={meme_url}\n          alt={meme.caption}\n          className=\"meme-image\"\n        />\n        <br /> <br />\n      </div>\n    );\n  });\n\n  // const deleteMeme = (id) => {\n  //     const memeDoc = doc(db, \"users\", user.uid, \"memes\", id)\n  // }\n  return <div>{uploadedMemeToDisplay}</div>;\n}\n"]},"metadata":{},"sourceType":"module"}