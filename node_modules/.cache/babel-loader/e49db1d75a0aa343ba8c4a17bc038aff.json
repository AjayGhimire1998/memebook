{"ast":null,"code":"var _jsxFileName = \"/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/CreateMeme.jsx\",\n    _s = $RefreshSig$();\n\nimport { ProfileContext } from \"../../context/ProfileContext\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateMemeContext } from \"../../context/CreateMemeContext\";\nimport \"./CreateMeme.css\";\nimport { UploadMemeContext } from \"../../context/UploadMemeContext\";\nimport { db, auth, storage } from \"../../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { collection, addDoc } from \"firebase/firestore\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateMeme() {\n  _s();\n\n  const [createMeme, setCreateMeme] = useContext(CreateMemeContext);\n  const [inputText, setInputText] = useState([]); // const [topMemeText, setTopMemetext] = useState(\"\");\n  // const [bottomMemeText, setBottomMemetext] = useState(\"\");\n\n  const [imageForMeme, setImageForMeme] = useState();\n  const [memesFromApi, setMemesFromApi] = useState();\n  const [currentGeneratedMeme, setCurrentGeneratedMeme] = useState();\n  const history = useHistory();\n  const [caption, setCaption] = useState(\"\");\n  const [imageLoad, setImageLoad] = useState(null); // function SeePreview(e) {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     const src = e.target.files[0];\n  //     setImageForMeme(src);\n  //   }\n  // }\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\").then(res => res.json()).then(body => {\n      setMemesFromApi([...body.data.memes]);\n    });\n  }, []);\n\n  const handleInputChange = e => {\n    setInputText({ ...inputText,\n      [e.target.name]: e.target.value\n    });\n    console.log(inputText.topText);\n  };\n\n  useEffect(() => {\n    const uploadFile = () => {\n      const name = new Date().getTime() + createMeme.name;\n      console.log(name);\n      const storageRef = ref(storage, createMeme.name);\n      const uploadTask = uploadBytesResumable(storageRef, createMeme);\n      uploadTask.on(\"state_changed\", snapshot => {\n        const progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n        console.log(\"Upload is \" + progress + \"% done\");\n        setImageLoad(progress);\n\n        switch (snapshot.state) {\n          case \"paused\":\n            console.log(\"Upload is paused\");\n            break;\n\n          case \"running\":\n            console.log(\"Upload is running\");\n            break;\n\n          default:\n            break;\n        }\n      }, error => {\n        console.log(error);\n      }, () => {\n        getDownloadURL(uploadTask.snapshot.ref).then(downloadURL => {\n          console.log(\"File available at\", downloadURL);\n          setCreateMeme({ ...createMeme,\n            uploadedCreaTEMeme: downloadURL\n          });\n        });\n      });\n    };\n\n    currentGeneratedMeme && uploadFile();\n  }, [currentGeneratedMeme]);\n  const memesINeed = memesFromApi === null || memesFromApi === void 0 ? void 0 : memesFromApi.filter(meme => {\n    return meme.box_count === 2;\n  });\n\n  const handleGenerate = e => {\n    e.preventDefault();\n    const randomMemeTemplate = Math.floor(Math.random() * memesINeed.length);\n    setCurrentGeneratedMeme(memesINeed[randomMemeTemplate]);\n    const randomMemeTemplateUrl = memesINeed[randomMemeTemplate].url;\n    setImageForMeme(randomMemeTemplateUrl);\n    console.log(memesINeed[randomMemeTemplate].box_count);\n    history.push(`/homeview/create/${memesINeed[randomMemeTemplate].name}`);\n  };\n\n  const handleCreate = e => {\n    e.preventDefault();\n    const currentMeme = currentGeneratedMeme;\n    console.log(currentMeme);\n    const formData = new FormData();\n    formData.append(\"username\", \"ajay.gh\");\n    formData.append(\"password\", \"Dharan123\");\n    formData.append(\"template_id\", currentMeme.id);\n    formData.append(\"text0\", inputText.topText);\n    formData.append(\"text1\", inputText.bottomText);\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData\n    }).then(res => res.json()).then(body => {\n      console.log(body);\n      setCreateMeme(body.data);\n    }).catch(error => console.log(\"Error:\", error));\n  };\n\n  const handleReset = e => {\n    e.preventDefault();\n    setInputText({\n      topText: \"\",\n      bottomText: \"\"\n    });\n  }; // console.log(imageForMeme);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-show\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        method: \"post\",\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label-top\",\n          children: [\"Alright, Lets Create a Meme\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), \"\\uD83E\\uDD2D\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"label\",\n          onClick: handleGenerate,\n          children: \"Generate Meme Template\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"fullName\",\n          children: \"Top Text: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          name: \"topText\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          forhtml: \"fullName\",\n          children: \"Bottom Text: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          name: \"bottomText\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }, this), imageForMeme ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"meme\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: imageForMeme,\n            alt: \"meme\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"top\",\n            children: inputText.topText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"bottom\",\n            children: inputText.bottomText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"reset-image\",\n          onClick: handleReset,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 18\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-profile\",\n          onClick: handleCreate,\n          children: \"Generate\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Caption...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-profile\",\n          onClick: handleCreate,\n          children: \"Share\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateMeme, \"/XBhswueYJ09DiD4pmCA3kCdkqE=\", false, function () {\n  return [useHistory];\n});\n\n_c = CreateMeme;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateMeme\");","map":{"version":3,"sources":["/Users/ajayghimire/Development/code/React Projects/reactfinal-project/src/components/AppContents/CreateMeme.jsx"],"names":["ProfileContext","useContext","useEffect","useRef","useState","useHistory","CreateMemeContext","UploadMemeContext","db","auth","storage","ref","uploadBytesResumable","getDownloadURL","collection","addDoc","CreateMeme","createMeme","setCreateMeme","inputText","setInputText","imageForMeme","setImageForMeme","memesFromApi","setMemesFromApi","currentGeneratedMeme","setCurrentGeneratedMeme","history","caption","setCaption","imageLoad","setImageLoad","fetch","then","res","json","body","data","memes","handleInputChange","e","target","name","value","console","log","topText","uploadFile","Date","getTime","storageRef","uploadTask","on","snapshot","progress","bytesTransferred","totalBytes","state","error","downloadURL","uploadedCreaTEMeme","memesINeed","filter","meme","box_count","handleGenerate","preventDefault","randomMemeTemplate","Math","floor","random","length","randomMemeTemplateUrl","url","push","handleCreate","currentMeme","formData","FormData","append","id","bottomText","method","catch","handleReset"],"mappings":"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","sourcesContent":["import { ProfileContext } from \"../../context/ProfileContext\";\nimport { useContext, useEffect, useRef, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { CreateMemeContext } from \"../../context/CreateMemeContext\";\nimport \"./CreateMeme.css\";\nimport { UploadMemeContext } from \"../../context/UploadMemeContext\";\nimport { db, auth, storage } from \"../../firebase\";\nimport { ref, uploadBytesResumable, getDownloadURL } from \"firebase/storage\";\nimport { collection,addDoc} from \"firebase/firestore\";\n\nexport default function CreateMeme() {\n  const [createMeme, setCreateMeme] = useContext(CreateMemeContext);\n  const [inputText, setInputText] = useState([]);\n  // const [topMemeText, setTopMemetext] = useState(\"\");\n  // const [bottomMemeText, setBottomMemetext] = useState(\"\");\n  const [imageForMeme, setImageForMeme] = useState();\n  const [memesFromApi, setMemesFromApi] = useState();\n  const [currentGeneratedMeme, setCurrentGeneratedMeme] = useState();\n  const history = useHistory();\n  const [caption, setCaption] = useState(\"\");\n  const [imageLoad, setImageLoad] = useState(null);\n\n  // function SeePreview(e) {\n  //   if (e.target.files && e.target.files.length > 0) {\n  //     const src = e.target.files[0];\n  //     setImageForMeme(src);\n  //   }\n  // }\n\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n      .then((res) => res.json())\n      .then((body) => {\n        setMemesFromApi([...body.data.memes]);\n      });\n  }, []);\n\n  const handleInputChange = (e) => {\n    setInputText({ ...inputText, [e.target.name]: e.target.value });\n    console.log(inputText.topText);\n  };\n\n  useEffect(() => {\n    const uploadFile = () => {\n      const name = new Date().getTime() + createMeme.name;\n      console.log(name);\n      const storageRef = ref(storage, createMeme.name);\n      const uploadTask = uploadBytesResumable(storageRef, createMeme);\n\n      uploadTask.on(\n        \"state_changed\",\n        (snapshot) => {\n          const progress =\n            (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n          console.log(\"Upload is \" + progress + \"% done\");\n          setImageLoad(progress);\n          switch (snapshot.state) {\n            case \"paused\":\n              console.log(\"Upload is paused\");\n              break;\n            case \"running\":\n              console.log(\"Upload is running\");\n              break;\n            default:\n              break;\n          }\n        },\n        (error) => {\n          console.log(error);\n        },\n        () => {\n          getDownloadURL(uploadTask.snapshot.ref).then((downloadURL) => {\n            console.log(\"File available at\", downloadURL);\n            setCreateMeme({ ...createMeme, uploadedCreaTEMeme: downloadURL });\n          });\n        }\n      );\n    };\n    currentGeneratedMeme && uploadFile();\n  }, [currentGeneratedMeme]);\n\n  const memesINeed = memesFromApi?.filter((meme) => {\n    return meme.box_count === 2;\n  });\n\n  const handleGenerate = (e) => {\n    e.preventDefault();\n    const randomMemeTemplate = Math.floor(Math.random() * memesINeed.length);\n    setCurrentGeneratedMeme(memesINeed[randomMemeTemplate]);\n    const randomMemeTemplateUrl = memesINeed[randomMemeTemplate].url;\n    setImageForMeme(randomMemeTemplateUrl);\n    console.log(memesINeed[randomMemeTemplate].box_count);\n    history.push(`/homeview/create/${memesINeed[randomMemeTemplate].name}`);\n  };\n\n  const handleCreate = (e) => {\n    e.preventDefault();\n    const currentMeme = currentGeneratedMeme;\n    console.log(currentMeme);\n    const formData = new FormData();\n\n    formData.append(\"username\", \"ajay.gh\");\n    formData.append(\"password\", \"Dharan123\");\n    formData.append(\"template_id\", currentMeme.id);\n    formData.append(\"text0\", inputText.topText);\n    formData.append(\"text1\", inputText.bottomText);\n\n    fetch(\"https://api.imgflip.com/caption_image\", {\n      method: \"POST\",\n      body: formData,\n    })\n      .then((res) => res.json())\n      .then((body) => {\n        console.log(body);\n        setCreateMeme(body.data);\n      })\n      .catch((error) => console.log(\"Error:\", error));\n  };\n\n  const handleReset = (e) => {\n    e.preventDefault();\n    setInputText({\n      topText: \"\",\n      bottomText: \"\",\n    });\n  };\n\n  // console.log(imageForMeme);\n  return (\n    <div className=\"container\">\n      <div className=\"create-show\">\n        <form method=\"post\" className=\"form\">\n          <label className=\"label-top\">\n            Alright, Lets Create a Meme\n            <br />\n            <br />\n            🤭\n          </label>\n          <br /> <br />\n          <button className=\"label\" onClick={handleGenerate}>\n            Generate Meme Template\n          </button>\n          <br />\n          <label forhtml=\"fullName\">Top Text: </label>\n          <br />\n          <textarea\n            type=\"text\"\n            name=\"topText\"\n            onChange={handleInputChange}\n          ></textarea>\n          <br />\n          <label forhtml=\"fullName\">Bottom Text: </label>\n          <br />\n          <textarea\n            type=\"text\"\n            name=\"bottomText\"\n            onChange={handleInputChange}\n          ></textarea>\n          {/* <small>Upload Progress: {imageLoad}% done!!</small> */}\n          <br />\n          {/* <input\n            name=\"creatingMeme\"\n            type=\"file\"\n            id=\"file-ip\"\n            accept=\"image/*\"\n            onChange={SeePreview}\n            hidden\n          ></input> */}\n          {/* {imageForMeme ? (\n            <div className=\"meme\">\n                <img src={URL.createObjectURL(imageForMeme)} alt=\"meme\" />\n                <h2 className=\"top\">{inputText.topText}</h2>\n                <h2 className=\"bottom\">{inputText.bottomText}</h2>\n            </div>\n          ) : null} */}\n          {imageForMeme ? (\n            <div className=\"meme\">\n              <img src={imageForMeme} alt=\"meme\" />\n              <h2 className=\"top\">{inputText.topText}</h2>\n              <h2 className=\"bottom\">{inputText.bottomText}</h2>\n            </div>\n          ) : null}\n          <br />\n          <button className=\"reset-image\" onClick={handleReset}>\n            Reset\n          </button>\n          <br /> <br />\n          <button className=\"save-profile\" onClick={handleCreate}>\n            Generate\n          </button>\n          <br/> <br/>\n          <input\n            type=\"text\"\n            placeholder=\"Caption...\"\n          ></input>\n          <button className=\"save-profile\" onClick={handleCreate}>\n            Share\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}